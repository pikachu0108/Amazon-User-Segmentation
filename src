#import libraries

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

#importing Amazon user dataset
data_set = pd.read_csv('Amazon.com Clustering Model.csv')
X = data_set.iloc[:, :-1].values
y = data_set.iloc[:, -1].values
print(X)
print(y)

#Handling Missing data from input
from sklearn.impute import SimpleImputer
imputer = SimpleImputer(missing_values = np.nan, strategy = 'mean')

imputer.fit(X[:, 0:1])
X[: , 0:1] = imputer.transform(X[:, 0:1])
print(X)
imputer.fit(X[:, 4:5])
X[: , 4:5] = imputer.transform(X[:, 4:5])
print(X)

#Encoding independent variables and dependent variables
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('encoder',OneHotEncoder(), [1])], remainder= 'passthrough')
X = np.array(ct.fit_transform(X))
print(X)


from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y = le.fit_transform(y)
print(y)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)
print(X_train)
print(X_test)
print(y_train)
print(y_test)

#Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train[:, 6:] = sc.fit_transform(X_train[:, 6:])
X_test[:, 6:] = sc.fit_transform(X_test[:, 6:])
print(X_train)

#K-Means Clustering 
#Using Elbow method for Optimal number of Cluster formation , WCSS
from sklearn.cluster import KMeans
wcss = []
for i in range(1, 11):
  kmeans = KMeans(n_clusters = i, init = 'k-mean++', random_state = 42)
  kmeans.fit(X)
  wcss.append(kmeans.inertia_)
plt.plot(range(1.11),wcss)
plt.title("Clusters for the dataset with Frequencies")
plt.xlabel('Numbers of clusters')
plt.ylabel('WCSS')
plt.show()

#K-Means Model Training and Testing
kmeans = KMeans(n_clusters = 4, init = 'k-means++', random_state = 42)
y_means = kmeans.fit_predict(X)
print(y_means)

#Visualization of Clusters and final result from Customer Segmentation
plt.scatter(X[y_means == 0, 0], X[y_means == 0, 1], s = 100, c = 'magenta', label = 'Cluster1 ')
plt.scatter(X[y_means == 1, 0], X[y_means == 1, 1], s = 100, c = 'blue', label = 'Cluster 2')
plt.scatter(X[y_means == 2, 0], X[y_means == 2, 1], s = 100, c = 'red', label = 'Cluster 3')
plt.scatter(X[y_means == 3, 0], X[y_means == 3, 1], s = 100, c = 'cyan', label = 'Cluster 4')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_center_[:, 1], s = 300, c = 'black', label = "Centroids")
plt.title('Cluster of Amazon users')
plt.xlabel('Annual Income in INR')
plt.ylabel('Purchase Rating')
plt.legend()
plt.show()

